# These lines specify your backend protocol and your publication branch. Git Gateway is an open source API that acts as
# a proxy between authenticated users of your site and your site repo. If you leave out the branch declaration, it will
# default to master.
backend:
  name: git-gateway
  branch: master

# By default, saving a post in the CMS interface will push a commit directly to the publication branch specified in
# backend. However, you also have the option to enable the Editorial Workflow, which adds an interface for drafting,
# reviewing, and approving posts.
publish_mode: editorial_workflow

# Netlify CMS allows users to upload images directly within the editor.  The media_folder specifies where these uploads
# should be saved.  Note that the media_folder file path is relative to the project root.  Since Gatsby stores static
# files in [project root]/static, our media_folder should be inside that directory.
media_folder: "static/img/uploads"

# While media_folder specifies where uploaded files will be saved in the repo, public_folder indicates where they can be
# found in the published site. This path is used in image src attributes and is relative to the file where it’s called.
# For this reason, we usually start the path at the site root, using the opening /.  If public_folder is not set,
# Netlify CMS will default to the same value as media_folder, adding an opening / if one is not included.
public_folder: "/img/uploads"

# Collections define the structure for the different content types on your static site. Since every site is different,
# the collections settings will be very different from one site to the next.
collections:

  # Folder collections represent one or more files with the same format, fields, and configuration options, all stored 
  # within the same folder in the repository. You might use a folder collection for blog posts, product pages, author 
  # data files, etc.  Unlike file collections, folder collections have the option to allow editors to create new items 
  # in the collection. This is set by the boolean create field.  Note: Folder collections must have at least one field 
  # with the name "title" for creating new entry slugs. That field should use the default "string" widget. The "label" 
  # for the field can be any string value.
  - name: "blog"
    label: "Blog"
    folder: "src/pages/blog"
    create: true
    slug: "{{year}}-{{month}}-{{day}}-{{slug}}"
    fields:
      - {label: "Template Key", name: "templateKey", widget: "hidden", default: "blog-post"}
      - {label: "Title", name: "title", widget: "string"}
      - {label: "Publish Date", name: "date", widget: "datetime"}
      - {label: "Description", name: "description", widget: "text"}
      - {label: "Body", name: "body", widget: "markdown"}
      - {label: "Tags", name: "tags", widget: "list"}

  # The entries for any folder collection can be filtered based on the value of a single field.  By filtering a folder
  # into different collections, you can manage files with different fields, options, extensions, etc. in the same folder.
  # The filter option requires two fields:
  # - field: the name of the collection field to filter on
  # - value: the desired field value
  # The example below creates two collections in the same folder, filtered by the language field. The first collection
  # includes posts with language: en, and the second, with language: es.
  #  - name: "english_posts"
  #    label: "Blog in English"
  #    folder: "_posts"
  #    filter: {field: "language", value: "en"}
  #    fields:
  #      - {label: "Language", name: "language", widget: "select", options: ["en", "es"]}
  #      - {label: "Title", name: "title", widget: "string"}
  #      - {label: "Content", name: "body", widget: "markdown"}
  #  - name: "spanish_posts"
  #    label: "Blog en Español"
  #    folder: "_posts"
  #    filter: {field: "language", value: "es"}
  #    fields:
  #      - {label: "Lenguaje", name: "language", widget: "select", options: ["en", "es"]}
  #      - {label: "Titulo", name: "title", widget: "string"}
  #      - {label: "Contenido", name: "body", widget: "markdown"}

  # A files collection contains one or more uniquely configured files. Unlike items in folder collections, which repeat
  # the same configuration over all files in the folder, each item in a files collection has an explicitly set path,
  # filename, and configuration. This can be useful for unique files with a custom set of fields, like a settings file
  # or a custom landing page with a unique content structure.
  # When configuring a files collection, each file in the collection is configured separately, and listed under the
  # files field of the collection. Each file has its own list of fields, and a unique filepath specified in the file
  # field (relative to the base of the repo).
  # Note: Files listed in a file collection must already exist in the repo, and must have a valid value for the file
  # type. For example, an empty file works as valid YAML, but a JSON file must have a non-empty value to be valid, such
  # as an empty object.
  - name: "pages"
    label: "Pages"
    files:
      - file: "src/pages/about/index.md"
        label: "About"
        name: "about"
        fields:
          - {label: "Template Key", name: "templateKey", widget: "hidden", default: "about-page"}
          - {label: "Title", name: "title", widget: "string"}
          - {label: "Body", name: "body", widget: "markdown"}
      - file: "src/pages/products/index.md"
        label: "Products Page"
        name: "products"
        fields:
          - {label: "Template Key", name: "templateKey", widget: "hidden", default: "product-page"}
          - {label: Title, name: title, widget: string}
          - {label: Image, name: image, widget: image}
          - {label: Heading, name: heading, widget: string}
          - {label: Description, name: description, widget: string}
          - {label: Intro, name: intro, widget: object, fields: [{label: Heading, name: heading, widget: string}, {label: Description, name: description, widget: text}, {label: Blurbs, name: blurbs, widget: list, fields: [{label: Image, name: image, widget: image}, {label: Text, name: text, widget: text}]}]}
          - {label: Main, name: main, widget: object, fields: [{label: Heading, name: heading, widget: string}, {label: Description, name: description, widget: text}, {label: Image1, name: image1, widget: object, fields: [{label: Image, name: image, widget: image}, {label: Alt, name: alt, widget: string}]}, {label: Image2, name: image2, widget: object, fields: [{label: Image, name: image, widget: image}, {label: Alt, name: alt, widget: string}]}, {label: Image3, name: image3, widget: object, fields: [{label: Image, name: image, widget: image}, {label: Alt, name: alt, widget: string}]}]}
          - {label: Testimonials, name: testimonials, widget: list, fields: [{label: Quote, name: quote, widget: string}, {label: Author, name: author, widget: string}]}
          - {label: Full_image, name: full_image, widget: image}
          - {label: Pricing, name: pricing, widget: object, fields: [{label: Heading, name: heading, widget: string}, {label: Description, name: description, widget: string}, {label: Plans, name: plans, widget: list, fields: [{label: Plan, name: plan, widget: string}, {label: Price, name: price, widget: string}, {label: Description, name: description, widget: string}, {label: Items, name: items, widget: list}]}]}
      - file: "src/pages/first/index.md"
        label: "First Page"
        name: "first"
        fields:
          - {label: "Template Key", name: "templateKey", widget: "hidden", default: "first-page"}
          - {label: Title, name: title, widget: string}
          - {label: Body, name: body, widget: markdown}
          - {label: Description, name: description, widget: markdown}
